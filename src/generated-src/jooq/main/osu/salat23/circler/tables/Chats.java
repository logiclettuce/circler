/*
 * This file is generated by jOOQ.
 */
package osu.salat23.circler.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import osu.salat23.circler.Keys;
import osu.salat23.circler.Public;
import osu.salat23.circler.tables.records.ChatsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Chats extends TableImpl<ChatsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.chats</code>
     */
    public static final Chats CHATS = new Chats();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChatsRecord> getRecordType() {
        return ChatsRecord.class;
    }

    /**
     * The column <code>public.chats.id</code>.
     */
    public final TableField<ChatsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.chats.client_type</code>.
     */
    public final TableField<ChatsRecord, String> CLIENT_TYPE = createField(DSL.name("client_type"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.chats.client_id</code>.
     */
    public final TableField<ChatsRecord, String> CLIENT_ID = createField(DSL.name("client_id"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.chats.html_profile_template</code>.
     */
    public final TableField<ChatsRecord, String> HTML_PROFILE_TEMPLATE = createField(DSL.name("html_profile_template"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.chats.text_profile_template</code>.
     */
    public final TableField<ChatsRecord, String> TEXT_PROFILE_TEMPLATE = createField(DSL.name("text_profile_template"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.chats.html_score_template</code>.
     */
    public final TableField<ChatsRecord, String> HTML_SCORE_TEMPLATE = createField(DSL.name("html_score_template"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.chats.text_score_template</code>.
     */
    public final TableField<ChatsRecord, String> TEXT_SCORE_TEMPLATE = createField(DSL.name("text_score_template"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "");

    private Chats(Name alias, Table<ChatsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Chats(Name alias, Table<ChatsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.chats</code> table reference
     */
    public Chats(String alias) {
        this(DSL.name(alias), CHATS);
    }

    /**
     * Create an aliased <code>public.chats</code> table reference
     */
    public Chats(Name alias) {
        this(alias, CHATS);
    }

    /**
     * Create a <code>public.chats</code> table reference
     */
    public Chats() {
        this(DSL.name("chats"), null);
    }

    public <O extends Record> Chats(Table<O> child, ForeignKey<O, ChatsRecord> key) {
        super(child, key, CHATS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ChatsRecord, Long> getIdentity() {
        return (Identity<ChatsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ChatsRecord> getPrimaryKey() {
        return Keys.CHATS_PKEY;
    }

    @Override
    public List<UniqueKey<ChatsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CHATS_CLIENT_TYPE_CLIENT_ID_KEY);
    }

    @Override
    public Chats as(String alias) {
        return new Chats(DSL.name(alias), this);
    }

    @Override
    public Chats as(Name alias) {
        return new Chats(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Chats rename(String name) {
        return new Chats(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Chats rename(Name name) {
        return new Chats(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
