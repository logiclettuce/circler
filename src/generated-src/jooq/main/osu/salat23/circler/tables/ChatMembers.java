/*
 * This file is generated by jOOQ.
 */
package osu.salat23.circler.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import osu.salat23.circler.Keys;
import osu.salat23.circler.Public;
import osu.salat23.circler.tables.records.ChatMembersRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChatMembers extends TableImpl<ChatMembersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.chat_members</code>
     */
    public static final ChatMembers CHAT_MEMBERS = new ChatMembers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChatMembersRecord> getRecordType() {
        return ChatMembersRecord.class;
    }

    /**
     * The column <code>public.chat_members.id</code>.
     */
    public final TableField<ChatMembersRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.chat_members.client_id</code>.
     */
    public final TableField<ChatMembersRecord, String> CLIENT_ID = createField(DSL.name("client_id"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.chat_members.chat_id</code>.
     */
    public final TableField<ChatMembersRecord, Long> CHAT_ID = createField(DSL.name("chat_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    private ChatMembers(Name alias, Table<ChatMembersRecord> aliased) {
        this(alias, aliased, null);
    }

    private ChatMembers(Name alias, Table<ChatMembersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.chat_members</code> table reference
     */
    public ChatMembers(String alias) {
        this(DSL.name(alias), CHAT_MEMBERS);
    }

    /**
     * Create an aliased <code>public.chat_members</code> table reference
     */
    public ChatMembers(Name alias) {
        this(alias, CHAT_MEMBERS);
    }

    /**
     * Create a <code>public.chat_members</code> table reference
     */
    public ChatMembers() {
        this(DSL.name("chat_members"), null);
    }

    public <O extends Record> ChatMembers(Table<O> child, ForeignKey<O, ChatMembersRecord> key) {
        super(child, key, CHAT_MEMBERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ChatMembersRecord, Long> getIdentity() {
        return (Identity<ChatMembersRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ChatMembersRecord> getPrimaryKey() {
        return Keys.CHAT_MEMBERS_PKEY;
    }

    @Override
    public List<UniqueKey<ChatMembersRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CHAT_MEMBERS_CLIENT_ID_CHAT_ID_KEY);
    }

    @Override
    public List<ForeignKey<ChatMembersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CHAT_MEMBERS__CHAT_MEMBERS_CHAT_ID_FKEY);
    }

    private transient Chats _chats;

    /**
     * Get the implicit join path to the <code>public.chats</code> table.
     */
    public Chats chats() {
        if (_chats == null)
            _chats = new Chats(this, Keys.CHAT_MEMBERS__CHAT_MEMBERS_CHAT_ID_FKEY);

        return _chats;
    }

    @Override
    public ChatMembers as(String alias) {
        return new ChatMembers(DSL.name(alias), this);
    }

    @Override
    public ChatMembers as(Name alias) {
        return new ChatMembers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ChatMembers rename(String name) {
        return new ChatMembers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChatMembers rename(Name name) {
        return new ChatMembers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
