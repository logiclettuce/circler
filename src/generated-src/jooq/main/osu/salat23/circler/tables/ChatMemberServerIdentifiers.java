/*
 * This file is generated by jOOQ.
 */
package osu.salat23.circler.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import osu.salat23.circler.Keys;
import osu.salat23.circler.Public;
import osu.salat23.circler.tables.records.ChatMemberServerIdentifiersRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChatMemberServerIdentifiers extends TableImpl<ChatMemberServerIdentifiersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.chat_member_server_identifiers</code>
     */
    public static final ChatMemberServerIdentifiers CHAT_MEMBER_SERVER_IDENTIFIERS = new ChatMemberServerIdentifiers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChatMemberServerIdentifiersRecord> getRecordType() {
        return ChatMemberServerIdentifiersRecord.class;
    }

    /**
     * The column <code>public.chat_member_server_identifiers.id</code>.
     */
    public final TableField<ChatMemberServerIdentifiersRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>public.chat_member_server_identifiers.chat_member_id</code>.
     */
    public final TableField<ChatMemberServerIdentifiersRecord, Long> CHAT_MEMBER_ID = createField(DSL.name("chat_member_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>public.chat_member_server_identifiers.player_identifier</code>.
     */
    public final TableField<ChatMemberServerIdentifiersRecord, String> PLAYER_IDENTIFIER = createField(DSL.name("player_identifier"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.chat_member_server_identifiers.server</code>.
     */
    public final TableField<ChatMemberServerIdentifiersRecord, String> SERVER = createField(DSL.name("server"), SQLDataType.VARCHAR.nullable(false), this, "");

    private ChatMemberServerIdentifiers(Name alias, Table<ChatMemberServerIdentifiersRecord> aliased) {
        this(alias, aliased, null);
    }

    private ChatMemberServerIdentifiers(Name alias, Table<ChatMemberServerIdentifiersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.chat_member_server_identifiers</code>
     * table reference
     */
    public ChatMemberServerIdentifiers(String alias) {
        this(DSL.name(alias), CHAT_MEMBER_SERVER_IDENTIFIERS);
    }

    /**
     * Create an aliased <code>public.chat_member_server_identifiers</code>
     * table reference
     */
    public ChatMemberServerIdentifiers(Name alias) {
        this(alias, CHAT_MEMBER_SERVER_IDENTIFIERS);
    }

    /**
     * Create a <code>public.chat_member_server_identifiers</code> table
     * reference
     */
    public ChatMemberServerIdentifiers() {
        this(DSL.name("chat_member_server_identifiers"), null);
    }

    public <O extends Record> ChatMemberServerIdentifiers(Table<O> child, ForeignKey<O, ChatMemberServerIdentifiersRecord> key) {
        super(child, key, CHAT_MEMBER_SERVER_IDENTIFIERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ChatMemberServerIdentifiersRecord, Long> getIdentity() {
        return (Identity<ChatMemberServerIdentifiersRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ChatMemberServerIdentifiersRecord> getPrimaryKey() {
        return Keys.CHAT_MEMBER_SERVER_IDENTIFIERS_PKEY;
    }

    @Override
    public List<UniqueKey<ChatMemberServerIdentifiersRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CHAT_MEMBER_SERVER_IDENTIFIERS_CHAT_MEMBER_ID_SERVER_KEY);
    }

    @Override
    public List<ForeignKey<ChatMemberServerIdentifiersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CHAT_MEMBER_SERVER_IDENTIFIERS__CHAT_MEMBER_SERVER_IDENTIFIERS_CHAT_MEMBER_ID_FKEY);
    }

    private transient ChatMembers _chatMembers;

    /**
     * Get the implicit join path to the <code>public.chat_members</code> table.
     */
    public ChatMembers chatMembers() {
        if (_chatMembers == null)
            _chatMembers = new ChatMembers(this, Keys.CHAT_MEMBER_SERVER_IDENTIFIERS__CHAT_MEMBER_SERVER_IDENTIFIERS_CHAT_MEMBER_ID_FKEY);

        return _chatMembers;
    }

    @Override
    public ChatMemberServerIdentifiers as(String alias) {
        return new ChatMemberServerIdentifiers(DSL.name(alias), this);
    }

    @Override
    public ChatMemberServerIdentifiers as(Name alias) {
        return new ChatMemberServerIdentifiers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ChatMemberServerIdentifiers rename(String name) {
        return new ChatMemberServerIdentifiers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChatMemberServerIdentifiers rename(Name name) {
        return new ChatMemberServerIdentifiers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
